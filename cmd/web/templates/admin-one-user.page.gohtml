{{template "admin" .}}

{{define "title"}}
    Admin User
{{end}}

{{define "content"}}
    <h2 class="mt-5">Admin User</h2>
    <hr>

    <form method="post" action="" name="user_form" id="user_form"
        class="needs-validation" autocomplete="off" novalidate="">

        <div class="mb-3">
            <label for="user" class="form-label">使用者</label>
            <input type="text" class="form-control" id="user" name="user"
                required="" autocomplete="user-new">
        </div>

        <div class="mb-3">
            <label for="password" class="form-label">密碼</label>
            <input type="text" class="form-control" id="password" name="password"
                autocomplete="password-new">
        </div>

        <div class="mb-3">
            <label for="verify_password" class="form-label">確認密碼</label>
            <input type="text" class="form-control" id="verify_password" name="verify_password"
                autocomplete="verify_password-new">
        </div>

        <hr>

        <div class="float-start">
            <a class="btn btn-primary" href="javascript:void(0);" onclick="val()" id="saveBtn">儲存</a>
            <a class="btn btn-warning" href="/admin/all-users" id="cancelBtn">取消</a>
        </div>
        <div class="float-end">
            <a class="btn btn-danger d-none" href="javascript:void(0);" id="deleteBtn">刪除</a>
        </div>

        <div class="clearfix"></div>
    </form>


{{end}}

{{define "js"}}

    <script>

        let id = window.location.pathname.split("/").pop();
        let delBtn = document.getElementById("deleteBtn");

        function val() {
            let form = document.getElementById("user_form");
            if (form.checkValidity() === false) {
                this.event.preventDefault();
                this.event.stopPropagation();
                form.classList.add("was-validated");
                return
            }
            form.classList.add("was-validated");

            if (document.getElementById("password").value !== document.getElementById("verify_password").value) {
                Swal.fire("Passwords do not match!");
                return
            }

            let payload = {
                id: parseInt(id, 10),
                user: document.getElementById("user").value,
                password: document.getElementById("password").value,
            }

            const requestOptions = {
                method: 'post',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + token,
                    },
                body: JSON.stringify(payload),
            }

            fetch("{{.Backend}}/api/admin/all-users/edit/" + id, requestOptions)
            .then(response => response.json())
            .then(function(data){
                if (data.error) {
                    Swal.fire("Error: " + data.message);
                } else {
                    location.href = "/admin/all-users";
                }
            }).catch((err) => {
                    notify(err, "error");
            })
        }

        document.addEventListener("DOMContentLoaded", function() {

            if (id !== "0") {
                
                const requestOptions = {
                    method: 'post',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + token,
                    }
                }

                fetch('{{.Backend}}/api/admin/all-users/' + id, requestOptions)
                .then(response => response.json())
                .then(function (data) {
                    data = data.data
                    if (data) {
                        document.getElementById("user").value = data.user;
                        if (data.user !== "admin") {
                            delBtn.classList.remove("d-none");
                        }
                    }
                }).catch((err) => {
                    notify(err, "error");
                })
            }
        })

        delBtn.addEventListener("click", function() {
            Swal.fire({
                title: '確認刪除?',
                text: "您將無法撤銷此操作",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Delete User'
            }).then((result) => {
                if (result.isConfirmed) {
                    const requestOptions = {
                        method: 'post',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer ' + token,
                        }
                    }
                    fetch("{{.Backend}}/api/admin/all-users/delete/" + id, requestOptions)
                    .then(response => response.json())
                    .then(async function(data){
                        if (data.error) {
                            Swal.fire("Error: " + data.message);
                        } else {
                            const paylod = await SendMessage("deleteUser", parseInt(id, 10), "");
                            if(paylod.status){
                                location.href="/admin/all-users";
                            } else {
                                notify(paylod.data, "error");
                            }
                        }
                    }).catch((err) => {
                        notify(err, "error");
                    })
                }
            }).catch((err) => {
                notify(err, "error");
            })
        })

    </script>


{{end}}